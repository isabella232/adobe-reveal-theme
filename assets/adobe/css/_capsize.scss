// A port of the capsize (https://seek-oss.github.io/capsize/) project to scss;

// This is how division is spelled in newer Sass
@function div($n, $d) { @return ($n / $d); }

// https://github.com/seek-oss/capsize/blob/master/packages/core/src/round.ts
@function roundTo4Decimals($n) {
    @return round($n * 10000) / 10000
}

// https://github.com/seek-oss/capsize/blob/master/packages/core/src/normaliseOptions.ts
@function normaliseOptions($options) {
  @if map-get($options, 'leading') and map-get($options, 'lineGap') {
    @error 'Only a single line height style can be provided.'
    ' Please pass either `lineGap` OR `leading`.';
  }

  @if map-get($options, 'capHeight') and map-get($options, 'fontSize') {
    @error 'Please pass either `capHeight` OR `fontSize`, not both.';
  }

  $fontMetrics: map-get($options, 'fontMetrics');
  $capHeightScale: div(
      map-get($fontMetrics, 'capHeight'),
      map-get($fontMetrics, 'unitsPerEm'));

  $specifiedFontSize: null;
  $specifiedCapHeight: null;

  @if map-get($options, 'capHeight') {
      $specifiedFontSize:
          div(map-get(options, 'capHeight'), map-get(options, 'capHeightScale'));
      $specifiedCapHeight: map-get(options, 'capHeight');
  } @else if map-get($options, 'fontSize') {
    $specifiedFontSize: map-get($options, 'fontSize');
    $specifiedCapHeight: $specifiedFontSize * $capHeightScale;
  } @else {
    @error 'Please pass either `capHeight` OR `fontSize`.';
  }

  $specifiedLineHeight: null;

  @if map-get($options, 'lineGap') {
    $specifiedLineHeight: $specifiedCapHeight + map-get($options, 'lineGap');
  } @else if map-get($options, 'leading') {
    $specifiedLineHeight: map-get($options, 'leading');
  }

  @return (
    'fontSize': $specifiedFontSize,
    'lineHeight': $specifiedLineHeight,
    'fontMetrics': $fontMetrics);
}

// https://github.com/seek-oss/capsize/blob/master/packages/core/src/precomputeValues.ts
@function capsizePrecompute($options) {
  $normalized: normaliseOptions($options);
  $fontSize: map-get($normalized, 'fontSize');
  $lineHeight: map-get($normalized, 'lineHeight');
  $fontMetrics: map-get($normalized, 'fontMetrics');
  $unitsPerEm: map-get($fontMetrics, 'unitsPerEm');

  $absoluteDescent: abs(map-get($fontMetrics, 'descent'));
  $capHeightScale: div(map-get($fontMetrics, 'capHeight'), $unitsPerEm);

  $descentScale: div($absoluteDescent, $unitsPerEm);
  $ascentScale: div(map-get($fontMetrics, 'ascent'), $unitsPerEm);
  $lineGapScale: div(map-get($fontMetrics, 'lineGap'), $unitsPerEm);

  $contentArea: map-get($fontMetrics, 'ascent')
                + map-get($fontMetrics, 'lineGap') + $absoluteDescent;
  $lineHeightScale: div($contentArea, $unitsPerEm);
  $lineHeightNormal: $lineHeightScale * $fontSize;

  $cht: $ascentScale - $capHeightScale + div($lineGapScale, 2);
  $blt: $descentScale + div($lineGapScale, 2);

  $capHeightTrim: null;
  $baselineTrim: null;
  @debug 'cht:'  $cht;
  @debug 'lineHeight:'  $lineHeight;

  $cssLineHeight: null;
  @if $lineHeight != 0 {
      $specifiedLineHeightOffset: div($lineHeightNormal - $lineHeight, 2);
      @debug 'specifiedLineHeightOffset:' $specifiedLineHeightOffset;
      $capHeightTrim: ($cht - div($specifiedLineHeightOffset, $fontSize)) * -1;
      $baselineTrim: ($blt - div($specifiedLineHeightOffset, $fontSize)) * -1;
      $cssLineHeight: roundTo4Decimals($lineHeight) * 1px;
  }
  @else {
      $capHeightTrim: $cht * -1;
      $baselineTrim: $blt * -1;
      $cssLineHeight: 'normal';
  }

  @return (
    'font-size': roundTo4Decimals($fontSize) * 1px,
    'cssLineHeight': $cssLineHeight,
    'capHeightTrim': roundTo4Decimals($capHeightTrim) * 1em,
    'baselineTrim': roundTo4Decimals($baselineTrim) * 1em,
  );
}


// A "type constructor" for font metrics.
@function fontMetrics($capHeight, $unitsPerEm, $ascent, $descent, $lineGap) {
    @return (
        'capHeight': $capHeight, 'unitsPerEm': $unitsPerEm, 'ascent': $ascent,
        'descent': $descent, 'lineGap': $lineGap);
}

@debug capsizePrecompute(
    ('fontSize':1000, 'lineGap': 0,
     'fontMetrics': ('capHeight': 677, 'unitsPerEm': 1000, 'ascent': 1491, 'descent': 431, 'lineGap': 0)));

//     'fontMetrics': fontMetrics($capHeight: 677, $unitsPerEm: 1000, $ascent: 1491, $descent: 431, $lineGap: 0))
