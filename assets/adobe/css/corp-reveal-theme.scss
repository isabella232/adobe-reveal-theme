---
---
$assets: {{"assets" | relative_url}};
//$assets: '/Users/dave/src/adobe-internal-presentations/assets';
@import 'corp-palette';

// A basic standard reveal theme is crucial for proper interop with the
// reveal.js ecosystem.  For example, the menu plugin plucks style information
// from the theme and reuses it
@import 'corp-reveal-theme-base';

// Have the slide cast a shadow, and gray the surroundings.
.reveal .slides {
  background-color: $backgroundColor;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
}
.reveal-viewport {
  background-color: #E5E5E5; // Color of area around slide.
}

// When a thing has explicit width or height, override the theme's limits.
// see https://github.com/hakimel/reveal.js/pull/3084.
.reveal *[width] {
  max-width: initial;
}
.reveal *[height] {
  max-height: initial;
}

// Never stretch images by default.
img { object-fit: cover; }

// --------------- Font Definitions ------------------
// A valid font is a map with keys, 'family', 'weight', 'unitsPerEm',
// 'hheaAscender', 'hheaDescender', and 'hheaLineGap'.

$adobeCleanVariants: (
  semilight:  (capsHeight: 677, familySuffix: '-semilight', weight: 300),
  regular: (capsHeight: 673, familySuffix: '', weight: 400),
  bold: (capsHeight: 666, familySuffix: '', weight: 700),
  extrabold: (capsHeight: 662, familySuffix: '', weight: 800));

@function adobe-clean-font($typeface) {
  $variant: map-get($adobeCleanVariants, $typeface);
  @return map-merge(
    $variant, (
      family: 'adobe-clean#{map-get($variant, "familySuffix")}',
      unitsPerEm: 1000,
      hheaAscender: 1013,
      hheaDescender: -239,
      hheaLineGap: 0));
}

$adobeCleanSemilight: adobe-clean-font('semilight');
$adobeCleanRegular: adobe-clean-font('regular');
$adobeCleanBold: adobe-clean-font('bold');
$adobeCleanExtrabold: adobe-clean-font('extrabold');

// -------- Global constants ------------
$slideWidth: 1920px;
$slideHeight: 1080px;

// ------- Keynote-specific translation -----------
// Dimensional parameters to Keynote mixins/functions are always in px, and
// placement is always expressed as (left, top, width, height), in that order.

@mixin keynote-text-inset($n) {
  padding: $n * 1px;
  box-sizing: border-box;
}

// Things that correspond to objects in keynote, positioned absolutely on the
// slide.
@mixin keynote-object($left, $top, $width, $height) {
  box-sizing: border-box;
  position: absolute;
  margin: 0px;
  padding: 0px;
  left: $left * 1px;
  top: $top * 1px;
  width: $width * 1px;
  height: $height * 1px;
}

@mixin keynote-text-box($left, $top, $width, $height, $inset: 4) {
  @include keynote-object($left, $top, $width, $height);
  @include keynote-text-inset($inset);
}

// Returns $font enhanced with keynote info for the given line spacing.
@function linespaced-font($font, $lineSpacing: 1.0) {
  // Each line of height $h will be vertically centered by the browser in an
  // area of line-height.
  $h: map-get($font, 'hheaAscender')
                  - map-get($font, 'hheaDescender');
  $unitsPerEm: map-get($font, 'unitsPerEm');
  $gap: map-get($font, 'hheaLineGap');
  $s: $lineSpacing;
  // Using these ::before/::after adjustments for nested lists with variable
  // font size will only work out perfectly if we are using a font with an “hhea
  // line gap” of zero (like Adobe Clean); otherwise when two nested lists are
  // closed we'll get an extra vertical offset that corresponds to the line gap:
  //
  // - I
  //   - A
  //     - 1 <==== HERE
  // - II
  $t: ($s - 1) * $h;
  @return map-merge(
    $font, (
      // Intentionally unitless line height.
      lineHeight: $s * ($h + $gap) / $unitsPerEm,
      trimTop: ($t + $s * $gap) * 0.5em / $unitsPerEm,
      trimBottom: ($t + (2 - $s) * $gap) * 0.5em / $unitsPerEm));
}

@mixin text-style($spacedFont, $fontSize) {
  line-height: map-get($spacedFont, 'lineHeight');
  font-size: $fontSize * 1px;
  font-family: map-get($spacedFont, 'family');
  font-weight: map-get($spacedFont, 'weight');
}

@mixin basekick($spacedFont) {
  &::before {
    content: '';
    margin-bottom: -1 * map-get($spacedFont, 'trimTop');
    display: table;
  }
  &::after {
    content: '';
    margin-top: -1 * map-get($spacedFont, 'trimBottom');
    display: table;
  }
}

@mixin pseudo-basekick($spacedFont) {
  border-top: map-get($spacedFont, 'trimTop') solid transparent;
  border-bottom: map-get($spacedFont, 'trimBottom') solid transparent;
}

// Sets font size, line height, and baseline adjustment accordingly.
//
// If useBorder is true, baseline adjustment will be done with transparent
// borders instead of with pseudo-elements, which is useful when the text is
// itself being CSS-injected on a pseudo-element.
@mixin keynote-text($font, $fontSize, $lineSpacing: 1.0, $useBorder: false) {
  $font: linespaced-font($font, $lineSpacing);
  @include text-style($font, $fontSize);
  @if $useBorder {
    @include pseudo-basekick($font);
  }
  @else {
    @include basekick($font);
  }
}

// -----------------
// Placeholder selector for all block-level elements that are designed to
// contain text directly.
%block-level-text {
  /* dummy content required by ruby SASS */
}

:is(address, article, aside, blockquote, dialog, dd, dt, figcaption,
    h1, h2, h3, h4, h5, h6, li, p, pre)
{
  @extend %block-level-text;
}

// Adds keynote-style before paragraph spacing of $d px to any block level text
// in the invoking selector context.
@mixin keynote-before-paragraph-spacing($d) {
  %block-level-text {
    margin-top: $d * 1px;
  }
  %block-level-text:first-child:not(:empty) {
    margin-top: 0px;
  }
  :not(:first-child):not(:empty) %block-level-text:first-child:not(:empty) {
    margin-top: $d * 1px;
  }
}

// Placeholder selector for body-level things that should be treated as text
// blocks with possible font transitions.
%body-text {
  /* dummy content required by ruby SASS */
}

:is(address, article, aside, blockquote, dialog, dl, ol, figcaption,
    h1, h2, h3, h4, h5, h6, p, pre, ul)
{
  @extend %body-text;
}

.reveal .slides {
  * { box-sizing: border-box; }
  // Default layouts
  h1, h2, h3 {
    @include keynote-text-box(49, 52, 1810, 102);
  }
  h2 {
    @include keynote-text($adobeCleanExtrabold, 56, $lineSpacing: 0.8);
  }
  .body {
    $adobeCleanSemilight10: linespaced-font($adobeCleanSemilight);
    @include keynote-text-box(49, 225, 1822, 793);
    @include keynote-before-paragraph-spacing(36); // 36.5 looks closer.
    @include text-style($adobeCleanSemilight10, 44);

    %body-text {
      @include basekick($adobeCleanSemilight10);
      padding: 0px;
    }

    :is(ul, ol, dl) :is(ul, ol, dl) {
      @include keynote-text($adobeCleanSemilight, 40);
      :is(ul, ol, dl) {
        @include keynote-text($adobeCleanSemilight, 36);
      }
    }

    // Scaled-down list bullets. See https://stackoverflow.com/a/41491657/125349
    ul {
      padding-inline-start: 0;
      $bulletOffset: 37px;
      > li {
        &::before {
          content: "•";
          position: absolute;
          left: -$bulletOffset;
          top: 0.25em;
          font-size: 0.7em;
        }
        margin-left: $bulletOffset;
        list-style-type: none;
        position: relative;
      }
    }
  }
}

@mixin keynote-image-object($left, $top, $width, $height) {
  @include keynote-object($left, $top, $width, $height);
  background-size: $width * 1px $height * 1px;
  content: "";
}

@mixin keynote-image($url, $left, $top, $width, $height) {
  background-image: url($url);
  @include keynote-image-object($left, $top, $width, $height);
}

// Background defaults
.reveal .slides .background {
  font-size: 16px;
  z-index: -1000;
  left: 0px; top: 0px;
  padding: 0px;
  margin: 0px;
  > * {
    width: 0; height: 0;
    position: absolute;
  }

  &::before {
    @include keynote-image(
      "../img/Adobe_Corporate_Horizontal_Lockup_NEW-Red_RGB-1894.png",
      63, 1036, 89, 23);
  }

  &::after {
    @include keynote-text-box(1473, 1033, 395, 34, $inset: 7);
    @include keynote-text($adobeCleanRegular, 16, $useBorder: true);
    content: "© 2021 Adobe. All Rights Reserved. Adobe Confidential.";
    text-align: right;
    color: #6E6E6E;
  }
}

.reveal .slides .layout.layout-manual {
  .body {
    // With manual layout, the body div acts like a background and covers
    // everything.  Move it backwards so it doesn't, e.g. prevent the header from
    // being selected.
    z-index: -1;
    left: 0px; top: 0px;
    padding: 0px; margin: 0px;
    > * {
      position: absolute;
      margin: 0px;
    }
  }
}

// Local Variables:
// css-indent-offset: 2
// smie-indent-basic: 2
// End:
